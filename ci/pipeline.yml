###########
# Jobs

jobs:

- name: set-self
  plan:
  - get: src-repository
    resource: src-repository
    trigger: true
  - set_pipeline: self
    file: src-repository/ci/pipeline.yml

- name: test-bot
  plan:
  - in_parallel:
    - get: general-task
    - get: src-repository
      resource: src-repository
      passed: [set-self]
      trigger: true
  - task: run-tests
    image: general-task
    file: src-repository/ci/test-runner.yml
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to pass tests for uaa-bot
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-info-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully passed tests for uaa-bot
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-info-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))

- name: bot-development-bulk-deactivate
  plan:
  - in_parallel:
    - get: general-task
    - get: src-repository
      resource: src-repository
      passed: [test-bot]
    - get: daily-timer
      trigger: true
  - task: run-bot-development-bulk-deactivate
    image: general-task
    file: src-repository/ci/run-bot-bulk-deactivate.yml
    params:
      BUILD_JOB_NAME: development-bulk-deactivate
      DAYS_AGO: 90
      NUMBER_DAYS_BEFORE: 1000
      SUMMARY_TITLE: "Users deactivated from development"
      UAA_BASE_URL: ((uaa-base-url-development))
      UAA_CLIENT_ID: ((uaa-client-id-development))
      UAA_CLIENT_SECRET: ((uaa-client-secret-development))
  - put: uaa-bot-bucket
    params:
      file: uaa-bot-summary/*-summary-*.json
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to bulk deactivate users in development with uaa-bot
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-info-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully bulk deactivated users in development with uaa-bot
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-info-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))

- name: bot-staging-bulk-deactivate
  plan:
  - in_parallel:
    - get: general-task
    - get: src-repository
      resource: src-repository
      passed: [test-bot]
    - get: daily-timer
      trigger: true
  - task: run-bot-staging-bulk-deactivate
    image: general-task
    file: src-repository/ci/run-bot-bulk-deactivate.yml
    params:
      BUILD_JOB_NAME: staging-bulk-deactivate
      DAYS_AGO: 90
      NUMBER_DAYS_BEFORE: 1000
      SUMMARY_TITLE: "Users deactivated from staging"
      UAA_BASE_URL: ((uaa-base-url-staging))
      UAA_CLIENT_ID: ((uaa-client-id-staging))
      UAA_CLIENT_SECRET: ((uaa-client-secret-staging))
  - put: uaa-bot-bucket
    params:
      file: uaa-bot-summary/*-summary-*.json
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to bulk deactivate users in staging with uaa-bot
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-info-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully bulk deactivated users in staging with uaa-bot
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-info-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))

- name: bot-production-bulk-deactivate
  plan:
  - in_parallel:
    - get: general-task
    - get: src-repository
      resource: src-repository
      passed: [test-bot]
  - task: run-bot-production-bulk-deactivate
    image: general-task
    file: src-repository/ci/run-bot-bulk-deactivate.yml
    params:
      BUILD_JOB_NAME: production-bulk-deactivate
      DAYS_AGO: ((production-days-ago))
      NUMBER_DAYS_BEFORE: ((production-number-days-before-days-ago))
      SUMMARY_TITLE: "Users deactivated from production"
      UAA_BASE_URL: ((uaa-base-url-production))
      UAA_CLIENT_ID: ((uaa-client-id-production))
      UAA_CLIENT_SECRET: ((uaa-client-secret-production))
  - put: uaa-bot-bucket
    params:
      file: uaa-bot-summary/*-summary-*.json
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to bulk deactivate users in production with uaa-bot
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-info-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully bulk deactivated users in production with uaa-bot
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-info-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))

- name: bot-production-list-expired
  plan:
  - get: general-task
  - get: src-repository
    resource: src-repository
    passed: [test-bot]
  - task: run-bot-production-list-expired
    image: general-task
    file: src-repository/ci/run-bot-command.yml
    params:
      BUILD_JOB_NAME: production-list-expired
      BOT_COMMAND: list-expired
      UAA_BASE_URL: ((uaa-base-url-production))
      UAA_CLIENT_ID: ((uaa-client-id-production))
      UAA_CLIENT_SECRET: ((uaa-client-secret-production))
  - put: uaa-bot-bucket
    params:
      file: uaa-bot-summary/*-summary-*.json
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to list expired users in production with uaa-bot
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-info-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully listed expired users in production with uaa-bot
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-info-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))

- name: bot-production-notify-1-day
  plan:
  - in_parallel:
    - get: general-task
    - get: src-repository
      resource: src-repository
      passed: [test-bot]
    - get: daily-timer
      trigger: true
  - task: run-bot-production-notify-1-day
    image: general-task
    file: src-repository/ci/run-bot-command.yml
    params:
      BOT_COMMAND: notify-1-day
      BUILD_JOB_NAME: production-notify-1-day
      SMTP_HOST: ((smtp-host))
      SMTP_PORT: ((smtp-port))
      SMTP_USER: ((smtp-user))
      SMTP_PASS: ((smtp-pass))
      SMTP_FROM: ((smtp-from))
      SMTP_CERT: ((smtp-cert))
      UAA_BASE_URL: ((uaa-base-url-production))
      UAA_CLIENT_ID: ((uaa-client-id-production))
      UAA_CLIENT_SECRET: ((uaa-client-secret-production))
  - put: uaa-bot-bucket
    params:
      file: uaa-bot-summary/*-summary-*.json
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to notify users with 1 day until deactivation with uaa-bot
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-info-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully notified users with 1 day until deactivation with uaa-bot
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-info-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))

- name: bot-production-notify-10-days
  plan:
  - in_parallel:
    - get: general-task
    - get: src-repository
      resource: src-repository
      passed: [test-bot]
    - get: daily-timer
      trigger: true
  - task: run-bot-production-notify-10-days
    image: general-task
    file: src-repository/ci/run-bot-command.yml
    params:
      BOT_COMMAND: notify-10-days
      BUILD_JOB_NAME: production-notify-10-days
      SMTP_HOST: ((smtp-host))
      SMTP_PORT: ((smtp-port))
      SMTP_USER: ((smtp-user))
      SMTP_PASS: ((smtp-pass))
      SMTP_FROM: ((smtp-from))
      SMTP_CERT: ((smtp-cert))
      UAA_BASE_URL: ((uaa-base-url-production))
      UAA_CLIENT_ID: ((uaa-client-id-production))
      UAA_CLIENT_SECRET: ((uaa-client-secret-production))
  - put: uaa-bot-bucket
    params:
      file: uaa-bot-summary/*-summary-*.json
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to notify users with 10 days until deactivation with uaa-bot
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-info-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully notified users with 10 days until deactivation with uaa-bot
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-info-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))

- name: bot-production-notify-deactivate
  plan:
  - in_parallel:
    - get: general-task
    - get: src-repository
      resource: src-repository
      passed: [test-bot]
    - get: daily-timer
      trigger: true
  - task: run-bot-production-notify-deactivate
    image: general-task
    file: src-repository/ci/run-bot-command.yml
    params:
      BOT_COMMAND: notify-deactivate
      BUILD_JOB_NAME: production-notify-deactivate
      SMTP_HOST: ((smtp-host))
      SMTP_PORT: ((smtp-port))
      SMTP_USER: ((smtp-user))
      SMTP_PASS: ((smtp-pass))
      SMTP_FROM: ((smtp-from))
      SMTP_CERT: ((smtp-cert))
      UAA_BASE_URL: ((uaa-base-url-production))
      UAA_CLIENT_ID: ((uaa-client-id-production))
      UAA_CLIENT_SECRET: ((uaa-client-secret-production))
  - put: uaa-bot-bucket
    params:
      file: uaa-bot-summary/*-summary-*.json
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to notify and deactivate users with uaa-bot
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-info-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully notified and deactivated users with uaa-bot
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-info-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))

- name: bot-development-list-lastlogon
  plan:
  - get: daily-timer
    trigger: true
  - get: general-task
  - get: src-repository
    resource: src-repository
    passed: [test-bot]
  - task: run-bot-development-list-lastlogon
    image: general-task
    file: src-repository/ci/run-bot-command-no-date.yml
    params:
      BUILD_JOB_NAME: development-list-lastlogon
      BOT_COMMAND: list-last-logon -d 0 -r 365
      UAA_BASE_URL: ((uaa-base-url-development))
      UAA_CLIENT_ID: ((uaa-client-id-development))
      UAA_CLIENT_SECRET: ((uaa-client-secret-development))
  - put: development-dashboard-bucket
    tags: [iaas]
    params:
      file: uaa-bot-summary/*-summary*.json
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to list last logon for users in development with uaa-bot
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-info-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully listed last logon for users in development with uaa-bot
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-info-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))

###########
# Resources

resources:

- name: src-repository
  type: git
  icon: github-circle
  check_every: 10s
  source:
    uri: https://github.com/cloud-gov/((name))
    branch: dashboard-lastlogon #((git-branch))
    commit_verification_keys: ((cloud-gov-pgp-keys))

- name: daily-timer
  type: time
  source:
    start: 6:00 AM
    stop: 7:00 AM
    location: America/New_York

- name: slack
  type: slack-notification
  source:
    url: ((slack-webhook-url))

- name: uaa-bot-bucket
  type: s3-iam
  icon: database
  source:
    bucket: ((uaa-bot-bucket))
    region_name: ((uaa-bot-region))
    regexp: /uaa-bot/(.*)-summary-(.*).json
    server_side_encryption: AES256

- name: development-dashboard-bucket
  type: s3-iam
  icon: database
  source:
    bucket: ((dashboard-bucket-development))
    region_name: ((uaa-bot-region))
    regexp: (.*)summary(.*).json
    server_side_encryption: AES256

- name: general-task
  type: registry-image
  source:
    aws_access_key_id: ((ecr_aws_key))
    aws_secret_access_key: ((ecr_aws_secret))
    repository: general-task
    aws_region: us-gov-west-1
    tag: latest

################
# Resource Types

resource_types:
- name: registry-image
  type: registry-image
  source:
    aws_access_key_id: ((ecr_aws_key))
    aws_secret_access_key: ((ecr_aws_secret))
    repository: registry-image-resource
    aws_region: us-gov-west-1
    tag: latest

- name: slack-notification
  type: registry-image
  source:
    aws_access_key_id: ((ecr_aws_key))
    aws_secret_access_key: ((ecr_aws_secret))
    repository: slack-notification-resource
    aws_region: us-gov-west-1
    tag: latest

- name: s3-iam
  type: registry-image
  source:
    aws_access_key_id: ((ecr_aws_key))
    aws_secret_access_key: ((ecr_aws_secret))
    repository: s3-resource
    aws_region: us-gov-west-1
    tag: latest

- name: git
  type: registry-image
  source:
    aws_access_key_id: ((ecr_aws_key))
    aws_secret_access_key: ((ecr_aws_secret))
    repository: git-resource
    aws_region: us-gov-west-1
    tag: latest

- name: time
  type: registry-image
  source:
    aws_access_key_id: ((ecr_aws_key))
    aws_secret_access_key: ((ecr_aws_secret))
    repository: time-resource
    aws_region: us-gov-west-1
    tag: latest
